#include <bits/stdc++.h>

void bubbleSort(std::vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                std::swap(arr[j], arr[j+1]);
            }
        }
    }
}

void insertionSort(std::vector<int>& arr) {
    int n = arr.size();
    for (int i = 1; i < n; i++) {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}

void selectionSort(std::vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n-1; i++) {
        int min_idx = i;
        for (int j = i+1; j < n; j++) {
            if (arr[j] < arr[min_idx]) {
                min_idx = j;
            }
        }
        std::swap(arr[min_idx], arr[i]);
    }
}

void merge(std::vector<int>& arr, int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;
    std::vector<int> L(n1);
    std::vector<int> R(n2);
    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (int i = 0; i < n2; i++)
        R[i] = arr[mid + 1 + i];

    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(std::vector<int>& arr, int left, int right) {
    if (left >= right) {
        return;
    }
    int mid = left + (right - left) / 2;
    mergeSort(arr, left, mid);
    mergeSort(arr, mid + 1, right);
    merge(arr, left, mid, right);
}

int partition(std::vector<int>& arr, int low, int high) {
    int pivot = arr[high];
    int i = (low - 1);
    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            std::swap(arr[i], arr[j]);
        }
    }
    std::swap(arr[i + 1], arr[high]);
    return (i + 1);
}

void quickSort(std::vector<int>& arr, int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

std::vector<int> generateRandomArray(int size) {
    std::vector<int> arr(size);
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> dis(1, 10000);

    std::generate(arr.begin(), arr.end(), [&]() { return dis(gen); });
    return arr;
}

std::vector<int> generateReversedArray(int size) {
    std::vector<int> arr(size);
    for (int i = 0; i < size; i++) {
        arr[i] = size - i;
    }
    return arr;
}

std::vector<int> generateSortedArray(int size) {
    std::vector<int> arr(size);
    for (int i = 0; i < size; i++) {
        arr[i] = i + 1;
    }
    return arr;
}

void measureExecutionTime(void (*sortFunc)(std::vector<int>&), std::vector<int>& arr, const std::string& sortName, int size, const std::string& condition) {
    auto start = std::chrono::high_resolution_clock::now();
    sortFunc(arr);
    auto end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double, std::micro> execTime = end - start;
    std::cout << sortName << " (" << size << " elements, " << condition << "): " << execTime.count() << " μs" << std::endl;
}

void measureExecutionTime(void (*sortFunc)(std::vector<int>&, int, int), std::vector<int>& arr, int left, int right, const std::string& sortName, int size, const std::string& condition) {
    auto start = std::chrono::high_resolution_clock::now();
    sortFunc(arr, left, right);
    auto end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double, std::micro> execTime = end - start;
    std::cout << sortName << " (" << size << " elements, " << condition << "): " << execTime.count() << " μs" << std::endl;
}

int main() {
    std::vector<int> sizes = {10, 100, 500, 1000, 10000};
    std::vector<std::string> conditions = {"random", "reversed", "sorted"};

    for (const int& size : sizes) {
        for (const std::string& condition : conditions) {
            std::vector<int> arr;
            if (condition == "random") {
                arr = generateRandomArray(size);
            } else if (condition == "reversed") {
                arr = generateReversedArray(size);
            } else if (condition == "sorted") {
                arr = generateSortedArray(size);
            }

            std::vector<int> arr_copy = arr;
            measureExecutionTime(bubbleSort, arr_copy, "Bubble Sort   ", size, condition);

            arr_copy = arr;
            measureExecutionTime(insertionSort, arr_copy, "Insertion Sort", size, condition);

            arr_copy = arr;
            measureExecutionTime(selectionSort, arr_copy, "Selection Sort", size, condition);

            arr_copy = arr;
            measureExecutionTime(mergeSort, arr_copy, 0, arr_copy.size() - 1, "Merge Sort    ", size, condition);

            arr_copy = arr;
            measureExecutionTime(quickSort, arr_copy, 0, arr_copy.size() - 1, "Quick Sort    ", size, condition);

            std::cout << "--------------------------" << std::endl;
        }
    }

    return 0;
}
